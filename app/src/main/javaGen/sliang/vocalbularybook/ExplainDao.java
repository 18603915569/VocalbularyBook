package sliang.vocalbularybook;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import sliang.vacalbularybook.Explain;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPLAIN".
*/
public class ExplainDao extends AbstractDao<Explain, Void> {

    public static final String TABLENAME = "EXPLAIN";

    /**
     * Properties of entity Explain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WordId = new Property(0, long.class, "wordId", false, "WORD_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
    }

    private Query<Explain> word_TranslationsQuery;
    private Query<Explain> word_ExplainsQuery;

    public ExplainDao(DaoConfig config) {
        super(config);
    }
    
    public ExplainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPLAIN\" (" + //
                "\"WORD_ID\" INTEGER NOT NULL ," + // 0: wordId
                "\"NAME\" TEXT);"); // 1: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPLAIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Explain entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWordId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Explain entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWordId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Explain readEntity(Cursor cursor, int offset) {
        Explain entity = new Explain( //
            cursor.getLong(offset + 0), // wordId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Explain entity, int offset) {
        entity.setWordId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Explain entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Explain entity) {
        return null;
    }

    @Override
    public boolean hasKey(Explain entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "translations" to-many relationship of Word. */
    public List<Explain> _queryWord_Translations(long wordId) {
        synchronized (this) {
            if (word_TranslationsQuery == null) {
                QueryBuilder<Explain> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WordId.eq(null));
                word_TranslationsQuery = queryBuilder.build();
            }
        }
        Query<Explain> query = word_TranslationsQuery.forCurrentThread();
        query.setParameter(0, wordId);
        return query.list();
    }

    /** Internal query to resolve the "explains" to-many relationship of Word. */
    public List<Explain> _queryWord_Explains(long wordId) {
        synchronized (this) {
            if (word_ExplainsQuery == null) {
                QueryBuilder<Explain> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WordId.eq(null));
                word_ExplainsQuery = queryBuilder.build();
            }
        }
        Query<Explain> query = word_ExplainsQuery.forCurrentThread();
        query.setParameter(0, wordId);
        return query.list();
    }

}
