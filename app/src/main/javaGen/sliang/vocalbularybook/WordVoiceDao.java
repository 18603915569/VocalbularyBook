package sliang.vocalbularybook;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import sliang.vacalbularybook.WordVoice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORD_VOICE".
*/
public class WordVoiceDao extends AbstractDao<WordVoice, Long> {

    public static final String TABLENAME = "WORD_VOICE";

    /**
     * Properties of entity WordVoice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WordVoiceId = new Property(0, long.class, "wordVoiceId", true, "_id");
        public final static Property SpeakUrl = new Property(1, String.class, "speakUrl", false, "SPEAK_URL");
        public final static Property UKSpeakUrl = new Property(2, String.class, "UKSpeakUrl", false, "UKSPEAK_URL");
        public final static Property USSpeakUrl = new Property(3, String.class, "USSpeakUrl", false, "USSPEAK_URL");
        public final static Property ResultSpeakUrl = new Property(4, String.class, "resultSpeakUrl", false, "RESULT_SPEAK_URL");
    }


    public WordVoiceDao(DaoConfig config) {
        super(config);
    }
    
    public WordVoiceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORD_VOICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: wordVoiceId
                "\"SPEAK_URL\" TEXT," + // 1: speakUrl
                "\"UKSPEAK_URL\" TEXT," + // 2: UKSpeakUrl
                "\"USSPEAK_URL\" TEXT," + // 3: USSpeakUrl
                "\"RESULT_SPEAK_URL\" TEXT);"); // 4: resultSpeakUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORD_VOICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WordVoice entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWordVoiceId());
 
        String speakUrl = entity.getSpeakUrl();
        if (speakUrl != null) {
            stmt.bindString(2, speakUrl);
        }
 
        String UKSpeakUrl = entity.getUKSpeakUrl();
        if (UKSpeakUrl != null) {
            stmt.bindString(3, UKSpeakUrl);
        }
 
        String USSpeakUrl = entity.getUSSpeakUrl();
        if (USSpeakUrl != null) {
            stmt.bindString(4, USSpeakUrl);
        }
 
        String resultSpeakUrl = entity.getResultSpeakUrl();
        if (resultSpeakUrl != null) {
            stmt.bindString(5, resultSpeakUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WordVoice entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWordVoiceId());
 
        String speakUrl = entity.getSpeakUrl();
        if (speakUrl != null) {
            stmt.bindString(2, speakUrl);
        }
 
        String UKSpeakUrl = entity.getUKSpeakUrl();
        if (UKSpeakUrl != null) {
            stmt.bindString(3, UKSpeakUrl);
        }
 
        String USSpeakUrl = entity.getUSSpeakUrl();
        if (USSpeakUrl != null) {
            stmt.bindString(4, USSpeakUrl);
        }
 
        String resultSpeakUrl = entity.getResultSpeakUrl();
        if (resultSpeakUrl != null) {
            stmt.bindString(5, resultSpeakUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public WordVoice readEntity(Cursor cursor, int offset) {
        WordVoice entity = new WordVoice( //
            cursor.getLong(offset + 0), // wordVoiceId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // speakUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UKSpeakUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // USSpeakUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // resultSpeakUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WordVoice entity, int offset) {
        entity.setWordVoiceId(cursor.getLong(offset + 0));
        entity.setSpeakUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUKSpeakUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUSSpeakUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResultSpeakUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WordVoice entity, long rowId) {
        entity.setWordVoiceId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WordVoice entity) {
        if(entity != null) {
            return entity.getWordVoiceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WordVoice entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
